# Autogenerated file. Do not edit.
from jacdac.bus import Bus, Client
from .constants import *



class WsskClient(Client):
    """
    Defines a binary protocol for IoT devices to talk to DeviceScript gateway over encrypted websockets.
     * This is not used as a regular Jacdac service.
    Implements a client for the `WSSK <https://microsoft.github.io/jacdac-docs/services/wssk>`_ service.

    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_WSSK, JD_WSSK_PACK_FORMATS, role)



    def set_streaming(self, status: WsskStreamingType) -> None:
        """
        Enable/disable forwarding of all Jacdac frames, exception reporting, and `dmesg` streaming.
        """
        self.send_cmd_packed(JD_WSSK_CMD_SET_STREAMING, status)

    def ping_device(self, payload: bytes) -> None:
        """
        Send from gateway when it wants to see if the device is alive.
        The device currently only support 0-length payload.
        """
        self.send_cmd_packed(JD_WSSK_CMD_PING_DEVICE, payload)

    def ping_cloud(self, payload: bytes) -> None:
        """
        Send from device to gateway to test connection.
        """
        self.send_cmd_packed(JD_WSSK_CMD_PING_CLOUD, payload)

    def get_hash(self, ) -> None:
        """
        Get SHA256 of the currently deployed program.
        """
        self.send_cmd_packed(JD_WSSK_CMD_GET_HASH, )

    def deploy_start(self, size: int) -> None:
        """
        Start deployment of a new program.
        """
        self.send_cmd_packed(JD_WSSK_CMD_DEPLOY_START, size)

    def deploy_write(self, payload: bytes) -> None:
        """
        Payload length must be multiple of 32 bytes.
        """
        self.send_cmd_packed(JD_WSSK_CMD_DEPLOY_WRITE, payload)

    def deploy_finish(self, ) -> None:
        """
        Finish deployment.
        """
        self.send_cmd_packed(JD_WSSK_CMD_DEPLOY_FINISH, )

    def c2d(self, datatype: WsskDataType, topic: str, payload: bytes) -> None:
        """
        Upload a labelled tuple of values to the cloud.
        The tuple will be automatically tagged with timestamp and originating device.
        """
        self.send_cmd_packed(JD_WSSK_CMD_C2D, datatype, topic, payload)

    def jacdac_packet(self, frame: bytes) -> None:
        """
        Sent both ways.
        """
        self.send_cmd_packed(JD_WSSK_CMD_JACDAC_PACKET, frame)
    
