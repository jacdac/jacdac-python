from jacdac.bus import Bus, Client
from .constants import *
from typing import Union


class DotMatrixClient(Client):
    """
    A rectangular dot matrix display, made of monochrome LEDs or Braille pins.
    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_DOT_MATRIX, JD_DOT_MATRIX_PACK_FORMATS, role)
    

    @property
    def dots(self) -> Union[bytes, None]:
        """
        The state of the screen where dot on/off state is
        stored as a bit, column by column. The column should be byte aligned.
        """
        reg = self.register(JD_DOT_MATRIX_REG_DOTS)
        return reg.value(0)

    @dots.setter
    def dots(self, value: bytes) -> None:
        reg = self.register(JD_DOT_MATRIX_REG_DOTS)
        reg.set_value(0, value)


    @property
    def brightness(self) -> Union[float, None]:
        """
        (Optional) Reads the general brightness of the display, brightness for LEDs. `0` when the screen is off., /
        """
        reg = self.register(JD_DOT_MATRIX_REG_BRIGHTNESS)
        return reg.value(0)

    @brightness.setter
    def brightness(self, value: float) -> None:
        reg = self.register(JD_DOT_MATRIX_REG_BRIGHTNESS)
        reg.set_value(0, value)


    @property
    def rows(self) -> Union[float, None]:
        """
        Number of rows on the screen, #
        """
        reg = self.register(JD_DOT_MATRIX_REG_ROWS)
        return reg.value(0)

    @property
    def columns(self) -> Union[float, None]:
        """
        Number of columns on the screen, #
        """
        reg = self.register(JD_DOT_MATRIX_REG_COLUMNS)
        return reg.value(0)

    @property
    def variant(self) -> Union[DotMatrixVariant, None]:
        """
        (Optional) Describes the type of matrix used.
        """
        reg = self.register(JD_DOT_MATRIX_REG_VARIANT)
        return reg.value(0)

    
