# Autogenerated file. Do not edit.
from jacdac.bus import Bus, Client, EventHandlerFn, UnsubscribeFn
from .constants import *
from typing import Optional


class CloudAdapterClient(Client):
    """
    Supports cloud connections to upload and download data.
     * Note that `f64` values following a label are not necessarily aligned.
    Implements a client for the `Cloud Adapter <https://microsoft.github.io/jacdac-docs/services/cloudadapter>`_ service.

    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_CLOUD_ADAPTER, JD_CLOUD_ADAPTER_PACK_FORMATS, role)


    @property
    def connected(self) -> Optional[bool]:
        """
        Indicate whether we're currently connected to the cloud server.
        When offline, `upload` commands are queued, and `get_twin` respond with cached values., 
        """
        return self.register(JD_CLOUD_ADAPTER_REG_CONNECTED).bool_value()

    @property
    def connection_name(self) -> Optional[str]:
        """
        User-friendly name of the connection, typically includes name of the server
        and/or type of cloud service (`"something.cloud.net (Provider IoT)"`)., 
        """
        return self.register(JD_CLOUD_ADAPTER_REG_CONNECTION_NAME).value()

    def on_cloud_command(self, handler: EventHandlerFn) -> UnsubscribeFn:
        """
        Emitted when cloud requests to run some action.
        """
        return self.on_event(JD_CLOUD_ADAPTER_EV_CLOUD_COMMAND, handler)

    def on_change(self, handler: EventHandlerFn) -> UnsubscribeFn:
        """
        Emitted when we connect or disconnect from the cloud.
        """
        return self.on_event(JD_CLOUD_ADAPTER_EV_CHANGE, handler)

    
