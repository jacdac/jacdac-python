from jacdac.bus import Bus, Client
from .constants import *
from typing import Union, cast


class ECO2Client(Client):
    """
    Measures equivalent CO₂ levels.
    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_E_CO2, JD_E_CO2_PACK_FORMATS, role)
    

    @property
    def e_CO2(self) -> Union[float, None]:
        """
        Equivalent CO₂ (eCO₂) readings., ppm
        """
        reg = self.register(JD_E_CO2_REG_E_CO2)
        value = reg.value(0)
        return cast(Union[float, None], value)

    @property
    def e_CO2_error(self) -> Union[float, None]:
        """
        Error on the reading value., ppm
        """
        reg = self.register(JD_E_CO2_REG_E_CO2_ERROR)
        value = reg.value(0)
        return cast(Union[float, None], value)

    @property
    def min_e_CO2(self) -> Union[float, None]:
        """
        (Optional) Minimum measurable value, ppm
        """
        reg = self.register(JD_E_CO2_REG_MIN_E_CO2)
        value = reg.value(0)
        return cast(Union[float, None], value)

    @property
    def max_e_CO2(self) -> Union[float, None]:
        """
        (Optional) Minimum measurable value, ppm
        """
        reg = self.register(JD_E_CO2_REG_MAX_E_CO2)
        value = reg.value(0)
        return cast(Union[float, None], value)

    @property
    def conditioning_period(self) -> Union[int, None]:
        """
        (Optional) Time required to achieve good sensor stability before measuring after long idle period., s
        """
        reg = self.register(JD_E_CO2_REG_CONDITIONING_PERIOD)
        value = reg.value(0)
        return cast(Union[int, None], value)

    @property
    def variant(self) -> Union[ECO2Variant, None]:
        """
        (Optional) Type of physical sensor and capabilities.
        """
        reg = self.register(JD_E_CO2_REG_VARIANT)
        value = reg.value(0)
        return cast(Union[ECO2Variant, None], value)

    
