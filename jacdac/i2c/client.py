# Autogenerated file. Do not edit.
from jacdac.bus import Bus, Client
from .constants import *
from typing import Optional


class I2CClient(Client):
    """
    Inter-Integrated Circuit (I2C, IÂ²C, IIC) serial communication bus lets you communicate with
     * many sensors and actuators.
    Implements a client for the `I2C <https://microsoft.github.io/jacdac-docs/services/i2c>`_ service.

    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_I2C, JD_I2C_PACK_FORMATS, role)


    @property
    def ok(self) -> Optional[bool]:
        """
        Indicates whether the I2C is working., 
        """
        return self.register(JD_I2C_REG_OK).bool_value()


    def transaction(self, address: int, num_read: int, write_buf: bytes) -> None:
        """
        `address` is 7-bit.
        `num_read` can be 0 if nothing needs to be read.
        The `write_buf` includes the register address if required (first one or two bytes).
        """
        self.send_cmd_packed(JD_I2C_CMD_TRANSACTION, address, num_read, write_buf)
    
