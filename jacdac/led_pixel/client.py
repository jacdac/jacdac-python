# Autogenerated file. Do not edit.
from jacdac.bus import Bus, Client
from .constants import *
from typing import Optional, cast


class LedPixelClient(Client):
    """
    A controller for strips of individually controlled RGB LEDs.
    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_LED_PIXEL, JD_LED_PIXEL_PACK_FORMATS, role)
    

    @property
    def brightness(self) -> Optional[float]:
        """
        Set the luminosity of the strip.
        At `0` the power to the strip is completely shut down., _: /
        """
        reg = self.register(JD_LED_PIXEL_REG_BRIGHTNESS)
        values = reg.values()
        return cast(Optional[float], values[0] if values else None)

    @brightness.setter
    def brightness(self, value: float) -> None:
        reg = self.register(JD_LED_PIXEL_REG_BRIGHTNESS)
        reg.set_values(value) # type: ignore


    @property
    def actual_brightness(self) -> Optional[float]:
        """
        This is the luminosity actually applied to the strip.
        May be lower than `brightness` if power-limited by the `max_power` register.
        It will rise slowly (few seconds) back to `brightness` is limits are no longer required., _: /
        """
        reg = self.register(JD_LED_PIXEL_REG_ACTUAL_BRIGHTNESS)
        values = reg.values()
        return cast(Optional[float], values[0] if values else None)

    @property
    def light_type(self) -> Optional[LedPixelLightType]:
        """
        Specifies the type of light strip connected to controller.
        Controllers which are sold with lights should default to the correct type
        and could not allow change., 
        """
        reg = self.register(JD_LED_PIXEL_REG_LIGHT_TYPE)
        values = reg.values()
        return cast(Optional[LedPixelLightType], values[0] if values else None)

    @light_type.setter
    def light_type(self, value: LedPixelLightType) -> None:
        reg = self.register(JD_LED_PIXEL_REG_LIGHT_TYPE)
        reg.set_values(value) # type: ignore


    @property
    def num_pixels(self) -> Optional[int]:
        """
        Specifies the number of pixels in the strip.
        Controllers which are sold with lights should default to the correct length
        and could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot., _: #
        """
        reg = self.register(JD_LED_PIXEL_REG_NUM_PIXELS)
        values = reg.values()
        return cast(Optional[int], values[0] if values else None)

    @num_pixels.setter
    def num_pixels(self, value: int) -> None:
        reg = self.register(JD_LED_PIXEL_REG_NUM_PIXELS)
        reg.set_values(value) # type: ignore


    @property
    def num_columns(self) -> Optional[int]:
        """
        (Optional) If the LED pixel strip is a matrix, specifies the number of columns. Otherwise, a square shape is assumed. Controllers which are sold with lights should default to the correct length
        and could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot., _: #
        """
        reg = self.register(JD_LED_PIXEL_REG_NUM_COLUMNS)
        values = reg.values()
        return cast(Optional[int], values[0] if values else None)

    @num_columns.setter
    def num_columns(self, value: int) -> None:
        reg = self.register(JD_LED_PIXEL_REG_NUM_COLUMNS)
        reg.set_values(value) # type: ignore


    @property
    def max_power(self) -> Optional[int]:
        """
        Limit the power drawn by the light-strip (and controller)., _: mA
        """
        reg = self.register(JD_LED_PIXEL_REG_MAX_POWER)
        values = reg.values()
        return cast(Optional[int], values[0] if values else None)

    @max_power.setter
    def max_power(self, value: int) -> None:
        reg = self.register(JD_LED_PIXEL_REG_MAX_POWER)
        reg.set_values(value) # type: ignore


    @property
    def max_pixels(self) -> Optional[int]:
        """
        The maximum supported number of pixels.
        All writes to `num_pixels` are clamped to `max_pixels`., _: #
        """
        reg = self.register(JD_LED_PIXEL_REG_MAX_PIXELS)
        values = reg.values()
        return cast(Optional[int], values[0] if values else None)

    @property
    def num_repeats(self) -> Optional[int]:
        """
        How many times to repeat the program passed in `run` command.
        Should be set before the `run` command.
        Setting to `0` means to repeat forever., _: #
        """
        reg = self.register(JD_LED_PIXEL_REG_NUM_REPEATS)
        values = reg.values()
        return cast(Optional[int], values[0] if values else None)

    @num_repeats.setter
    def num_repeats(self, value: int) -> None:
        reg = self.register(JD_LED_PIXEL_REG_NUM_REPEATS)
        reg.set_values(value) # type: ignore


    @property
    def variant(self) -> Optional[LedPixelVariant]:
        """
        (Optional) Specifies the shape of the light strip., 
        """
        reg = self.register(JD_LED_PIXEL_REG_VARIANT)
        values = reg.values()
        return cast(Optional[LedPixelVariant], values[0] if values else None)


    def run(self, program: bytes) -> None:
        """
        Run the given light "program". See service description for details.
        """
        self.send_cmd_packed(JD_LED_PIXEL_CMD_RUN, program)
    
