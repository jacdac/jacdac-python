from jacdac.bus import Bus, Client
from .constants import *
from typing import Union


class ServoClient(Client):
    """
    Servo is a small motor with arm that can be pointing at a specific direction.
     * 
     * The `min/max_angle/pulse` may be read-only if the servo is permanently affixed to its Jacdac controller.
    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_SERVO, JD_SERVO_PACK_FORMATS, role)
    

    @property
    def angle(self) -> Union[float, None]:
        """
        Specifies the angle of the arm (request)., °
        """
        reg = self.register(JD_SERVO_REG_ANGLE)
        return reg.value(0)

    @angle.setter
    def angle(self, value: float) -> None:
        reg = self.register(JD_SERVO_REG_ANGLE)
        reg.set_value(0, value)


    @property
    def enabled(self) -> Union[bool, None]:
        """
        Turn the power to the servo on/off.
        """
        reg = self.register(JD_SERVO_REG_ENABLED)
        return reg.value(0)

    @enabled.setter
    def enabled(self, value: bool) -> None:
        reg = self.register(JD_SERVO_REG_ENABLED)
        reg.set_value(0, value)


    @property
    def offset(self) -> Union[float, None]:
        """
        Correction applied to the angle to account for the servo arm drift., °
        """
        reg = self.register(JD_SERVO_REG_OFFSET)
        return reg.value(0)

    @offset.setter
    def offset(self, value: float) -> None:
        reg = self.register(JD_SERVO_REG_OFFSET)
        reg.set_value(0, value)


    @property
    def min_angle(self) -> Union[float, None]:
        """
        Lowest angle that can be set., °
        """
        reg = self.register(JD_SERVO_REG_MIN_ANGLE)
        return reg.value(0)

    @property
    def min_pulse(self) -> Union[float, None]:
        """
        The length of pulse corresponding to lowest angle., us
        """
        reg = self.register(JD_SERVO_REG_MIN_PULSE)
        return reg.value(0)

    @min_pulse.setter
    def min_pulse(self, value: float) -> None:
        reg = self.register(JD_SERVO_REG_MIN_PULSE)
        reg.set_value(0, value)


    @property
    def max_angle(self) -> Union[float, None]:
        """
        Highest angle that can be set., °
        """
        reg = self.register(JD_SERVO_REG_MAX_ANGLE)
        return reg.value(0)

    @property
    def max_pulse(self) -> Union[float, None]:
        """
        The length of pulse corresponding to highest angle., us
        """
        reg = self.register(JD_SERVO_REG_MAX_PULSE)
        return reg.value(0)

    @max_pulse.setter
    def max_pulse(self, value: float) -> None:
        reg = self.register(JD_SERVO_REG_MAX_PULSE)
        reg.set_value(0, value)


    @property
    def stall_torque(self) -> Union[float, None]:
        """
        (Optional) The servo motor will stop rotating when it is trying to move a ``stall_torque`` weight at a radial distance of ``1.0`` cm., kg/cm
        """
        reg = self.register(JD_SERVO_REG_STALL_TORQUE)
        return reg.value(0)

    @property
    def response_speed(self) -> Union[float, None]:
        """
        (Optional) Time to move 60°., s/60°
        """
        reg = self.register(JD_SERVO_REG_RESPONSE_SPEED)
        return reg.value(0)

    @property
    def current_angle(self) -> Union[float, None]:
        """
        (Optional) The current physical position of the arm., °
        """
        reg = self.register(JD_SERVO_REG_CURRENT_ANGLE)
        return reg.value(0)

    
