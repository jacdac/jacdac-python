from jacdac.bus import Bus, Client
from .constants import *
from typing import Union, cast


class DistanceClient(Client):
    """
    A sensor that determines the distance of an object without any physical contact involved.
    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_DISTANCE, JD_DISTANCE_PACK_FORMATS, role)
    

    @property
    def distance(self) -> Union[float, None]:
        """
        Current distance from the object, m
        """
        reg = self.register(JD_DISTANCE_REG_DISTANCE)
        value = reg.value(0)
        return cast(Union[float, None], value)

    @property
    def min_range(self) -> Union[float, None]:
        """
        (Optional) Minimum measurable distance, m
        """
        reg = self.register(JD_DISTANCE_REG_MIN_RANGE)
        value = reg.value(0)
        return cast(Union[float, None], value)

    @property
    def max_range(self) -> Union[float, None]:
        """
        (Optional) Maximum measurable distance, m
        """
        reg = self.register(JD_DISTANCE_REG_MAX_RANGE)
        value = reg.value(0)
        return cast(Union[float, None], value)

    @property
    def variant(self) -> Union[DistanceVariant, None]:
        """
        (Optional) Determines the type of sensor used.
        """
        reg = self.register(JD_DISTANCE_REG_VARIANT)
        value = reg.value(0)
        return cast(Union[DistanceVariant, None], value)

    
