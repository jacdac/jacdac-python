# Autogenerated file. Do not edit.
from jacdac.bus import Bus, Client
from .constants import *
from typing import Optional, cast


class GyroscopeClient(Client):
    """
    A 3-axis gyroscope.
    Implements a client for the `Gyroscope <https://microsoft.github.io/jacdac-docs/services/gyroscope>`_ service.
    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_GYROSCOPE, JD_GYROSCOPE_PACK_FORMATS, role)
    

    @property
    def rotation_rates(self) -> Optional[tuple[float, float, float]]:
        """
        Indicates the current rates acting on gyroscope., x: °/s,y: °/s,z: °/s
        """
        reg = self.register(JD_GYROSCOPE_REG_ROTATION_RATES)
        values = reg.values()
        return cast(Optional[tuple[float, float, float]], values)

    @property
    def rotation_rates_error(self) -> Optional[float]:
        """
        (Optional) Error on the reading value., _: °/s
        """
        reg = self.register(JD_GYROSCOPE_REG_ROTATION_RATES_ERROR)
        values = reg.values()
        return cast(Optional[float], values[0] if values else None)

    @property
    def max_rate(self) -> Optional[float]:
        """
        (Optional) Configures the range of rotation rates.
        The value will be "rounded up" to one of `max_rates_supported`., _: °/s
        """
        reg = self.register(JD_GYROSCOPE_REG_MAX_RATE)
        values = reg.values()
        return cast(Optional[float], values[0] if values else None)

    @max_rate.setter
    def max_rate(self, value: float) -> None:
        reg = self.register(JD_GYROSCOPE_REG_MAX_RATE)
        reg.set_values(value)


    
