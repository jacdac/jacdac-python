from jacdac.bus import Bus, Client
from .constants import *
from typing import Union, cast


class GyroscopeClient(Client):
    """
    A 3-axis gyroscope.
    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_GYROSCOPE, JD_GYROSCOPE_PACK_FORMATS, role)
    

    @property
    def x(self) -> Union[float, None]:
        """
        Indicates the current rates acting on gyroscope., °/s
        """
        reg = self.register(JD_GYROSCOPE_REG_ROTATION_RATES)
        value = reg.value(0)
        return cast(Union[float, None], value)

    @property
    def y(self) -> Union[float, None]:
        """
        Indicates the current rates acting on gyroscope., °/s
        """
        reg = self.register(JD_GYROSCOPE_REG_ROTATION_RATES)
        value = reg.value(1)
        return cast(Union[float, None], value)

    @property
    def z(self) -> Union[float, None]:
        """
        Indicates the current rates acting on gyroscope., °/s
        """
        reg = self.register(JD_GYROSCOPE_REG_ROTATION_RATES)
        value = reg.value(2)
        return cast(Union[float, None], value)

    @property
    def rotation_rates_error(self) -> Union[float, None]:
        """
        (Optional) Error on the reading value., °/s
        """
        reg = self.register(JD_GYROSCOPE_REG_ROTATION_RATES_ERROR)
        value = reg.value(0)
        return cast(Union[float, None], value)

    @property
    def max_rate(self) -> Union[float, None]:
        """
        (Optional) Configures the range of rotation rates.
        The value will be "rounded up" to one of `max_rates_supported`., °/s
        """
        reg = self.register(JD_GYROSCOPE_REG_MAX_RATE)
        value = reg.value(0)
        return cast(Union[float, None], value)

    @max_rate.setter
    def max_rate(self, value: float) -> None:
        reg = self.register(JD_GYROSCOPE_REG_MAX_RATE)
        reg.set_value(0, value)


    
