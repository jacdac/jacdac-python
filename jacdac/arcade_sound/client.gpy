from jacdac.bus import Bus, Client
from .constants import *
from typing import Union


class ArcadeSoundClient(Client):
    """
    A sound playing device.
     * 
     * This is typically run over an SPI connection, not regular single-wire JACDAC.
    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_ARCADE_SOUND, JD_ARCADE_SOUND_PACK_FORMATS, role)
    

    @property
    def sample_rate(self) -> Union[float, None]:
        """
        Get or set playback sample rate (in samples per second).
        If you set it, read it back, as the value may be rounded up or down., Hz
        """
        reg = self.register(JD_ARCADE_SOUND_REG_SAMPLE_RATE)
        return reg.value(0)

    @sample_rate.setter
    def sample_rate(self, value: float) -> None:
        reg = self.register(JD_ARCADE_SOUND_REG_SAMPLE_RATE)
        reg.set_value(0, value)


    @property
    def buffer_size(self) -> Union[float, None]:
        """
        The size of the internal audio buffer., B
        """
        reg = self.register(JD_ARCADE_SOUND_REG_BUFFER_SIZE)
        return reg.value(0)

    @property
    def buffer_pending(self) -> Union[float, None]:
        """
        How much data is still left in the buffer to play.
        Clients should not send more data than `buffer_size - buffer_pending`,
        but can keep the `buffer_pending` as low as they want to ensure low latency
        of audio playback., B
        """
        reg = self.register(JD_ARCADE_SOUND_REG_BUFFER_PENDING)
        return reg.value(0)


    def play(self, samples: bytes) -> None:
        """
        Play samples, which are single channel, signed 16-bit little endian values.
        """
        # TODO: self.sendCommand(jacdac.JDPacket.jdpacked(JD_arcade_Sound_CMD_play, "b", [samples]))
    
