# Autogenerated file. Do not edit.
from jacdac.bus import Bus, Client
from .constants import *
from typing import Optional, cast


class RealTimeClockClient(Client):
    """
    Real time clock to support collecting data with precise time stamps.
    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_REAL_TIME_CLOCK, JD_REAL_TIME_CLOCK_PACK_FORMATS, role)
    

    @property
    def local_time(self) -> Optional[tuple[int, int, int, int, int, int, int]]:
        """
        Current time in 24h representation. 
        * ``day_of_month`` is day of the month, starting at ``1``
        * ``day_of_week`` is day of the week, starting at ``1`` as monday
        Default streaming period is 1 second., 
        """
        reg = self.register(JD_REAL_TIME_CLOCK_REG_LOCAL_TIME)
        values = reg.values()
        return cast(Optional[tuple[int, int, int, int, int, int, int]], values)

    @property
    def error(self) -> Optional[float]:
        """
        (Optional) Time drift since the last call to the ``set_time`` command., _: s
        """
        reg = self.register(JD_REAL_TIME_CLOCK_REG_ERROR)
        values = reg.values()
        return cast(Optional[float], values[0] if values else None)

    @property
    def precision(self) -> Optional[float]:
        """
        (Optional) Error on the clock, in parts per million of seconds., _: ppm
        """
        reg = self.register(JD_REAL_TIME_CLOCK_REG_PRECISION)
        values = reg.values()
        return cast(Optional[float], values[0] if values else None)

    @property
    def variant(self) -> Optional[RealTimeClockVariant]:
        """
        (Optional) The type of physical clock used by the sensor., 
        """
        reg = self.register(JD_REAL_TIME_CLOCK_REG_VARIANT)
        values = reg.values()
        return cast(Optional[RealTimeClockVariant], values[0] if values else None)


    def set_time(self, year: int, month: int, day_of_month: int, day_of_week: int, hour: int, min: int, sec: int) -> None:
        """
        Sets the current time and resets the error.
        """
        self.send_cmd_packed(JD_REAL_TIME_CLOCK_CMD_SET_TIME, year, month, day_of_month, day_of_week, hour, min, sec)
    
