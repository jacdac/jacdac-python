from jacdac.bus import Bus, Client
from .constants import *
from typing import Union


class RealTimeClockClient(Client):
    """
    Real time clock to support collecting data with precise time stamps.
    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_REAL_TIME_CLOCK, JD_REAL_TIME_CLOCK_PACK_FORMATS, role)
    

    @property
    def year(self) -> Union[float, None]:
        """
        Current time in 24h representation. 
        * ``day_of_month`` is day of the month, starting at ``1``
        * ``day_of_week`` is day of the week, starting at ``1`` as monday
        Default streaming period is 1 second.
        """
        reg = self.register(JD_REAL_TIME_CLOCK_REG_LOCAL_TIME)
        return reg.value(0)

    @property
    def month(self) -> Union[float, None]:
        """
        Current time in 24h representation. 
        * ``day_of_month`` is day of the month, starting at ``1``
        * ``day_of_week`` is day of the week, starting at ``1`` as monday
        Default streaming period is 1 second.
        """
        reg = self.register(JD_REAL_TIME_CLOCK_REG_LOCAL_TIME)
        return reg.value(1)

    @property
    def day_of_month(self) -> Union[float, None]:
        """
        Current time in 24h representation. 
        * ``day_of_month`` is day of the month, starting at ``1``
        * ``day_of_week`` is day of the week, starting at ``1`` as monday
        Default streaming period is 1 second.
        """
        reg = self.register(JD_REAL_TIME_CLOCK_REG_LOCAL_TIME)
        return reg.value(2)

    @property
    def day_of_week(self) -> Union[float, None]:
        """
        Current time in 24h representation. 
        * ``day_of_month`` is day of the month, starting at ``1``
        * ``day_of_week`` is day of the week, starting at ``1`` as monday
        Default streaming period is 1 second.
        """
        reg = self.register(JD_REAL_TIME_CLOCK_REG_LOCAL_TIME)
        return reg.value(3)

    @property
    def hour(self) -> Union[float, None]:
        """
        Current time in 24h representation. 
        * ``day_of_month`` is day of the month, starting at ``1``
        * ``day_of_week`` is day of the week, starting at ``1`` as monday
        Default streaming period is 1 second.
        """
        reg = self.register(JD_REAL_TIME_CLOCK_REG_LOCAL_TIME)
        return reg.value(4)

    @property
    def min(self) -> Union[float, None]:
        """
        Current time in 24h representation. 
        * ``day_of_month`` is day of the month, starting at ``1``
        * ``day_of_week`` is day of the week, starting at ``1`` as monday
        Default streaming period is 1 second.
        """
        reg = self.register(JD_REAL_TIME_CLOCK_REG_LOCAL_TIME)
        return reg.value(5)

    @property
    def sec(self) -> Union[float, None]:
        """
        Current time in 24h representation. 
        * ``day_of_month`` is day of the month, starting at ``1``
        * ``day_of_week`` is day of the week, starting at ``1`` as monday
        Default streaming period is 1 second.
        """
        reg = self.register(JD_REAL_TIME_CLOCK_REG_LOCAL_TIME)
        return reg.value(6)

    @property
    def error(self) -> Union[float, None]:
        """
        (Optional) Time drift since the last call to the ``set_time`` command., s
        """
        reg = self.register(JD_REAL_TIME_CLOCK_REG_ERROR)
        return reg.value(0)

    @property
    def precision(self) -> Union[float, None]:
        """
        (Optional) Error on the clock, in parts per million of seconds., ppm
        """
        reg = self.register(JD_REAL_TIME_CLOCK_REG_PRECISION)
        return reg.value(0)

    @property
    def variant(self) -> Union[RealTimeClockVariant, None]:
        """
        (Optional) The type of physical clock used by the sensor.
        """
        reg = self.register(JD_REAL_TIME_CLOCK_REG_VARIANT)
        return reg.value(0)


    def set_time(self, year: float, month: float, day_of_month: float, day_of_week: float, hour: float, min: float, sec: float) -> None:
        """
        Sets the current time and resets the error.
        """
        # TODO: self.sendCommand(jacdac.JDPacket.jdpacked(JD_real_Time_Clock_CMD_set_time, "u16 u8 u8 u8 u8 u8 u8", [year, month, day_of_month, day_of_week, hour, min, sec]))
    
