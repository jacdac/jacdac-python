from jacdac.bus import Bus, Client
from .constants import *
from typing import Union, cast


class CompassClient(Client):
    """
    A sensor that measures the heading.
    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_COMPASS, JD_COMPASS_PACK_FORMATS, role)
    

    @property
    def heading(self) -> Union[float, None]:
        """
        The heading with respect to the magnetic north., °
        """
        reg = self.register(JD_COMPASS_REG_HEADING)
        value = reg.value(0)
        return cast(Union[float, None], value)

    @property
    def enabled(self) -> Union[bool, None]:
        """
        Turn on or off the sensor. Turning on the sensor may start a calibration sequence.
        """
        reg = self.register(JD_COMPASS_REG_ENABLED)
        value = reg.value(0)
        return cast(Union[bool, None], value)

    @enabled.setter
    def enabled(self, value: bool) -> None:
        reg = self.register(JD_COMPASS_REG_ENABLED)
        reg.set_value(0, value)


    @property
    def heading_error(self) -> Union[float, None]:
        """
        (Optional) Error on the heading reading, °
        """
        reg = self.register(JD_COMPASS_REG_HEADING_ERROR)
        value = reg.value(0)
        return cast(Union[float, None], value)


    def calibrate(self, ) -> None:
        """
        Starts a calibration sequence for the compass.
        """
        self.send_cmd_packed(JD_COMPASS_CMD_CALIBRATE, )
    
