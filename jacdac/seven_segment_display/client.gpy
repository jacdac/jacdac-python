from jacdac.bus import Bus, Client
from .constants import *
from typing import Union


class SevenSegmentDisplayClient(Client):
    """
    A 7-segment numeric display, with one or more digits.
    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_SEVEN_SEGMENT_DISPLAY, JD_SEVEN_SEGMENT_DISPLAY_PACK_FORMATS, role)
    

    @property
    def digits(self) -> Union[bytes, None]:
        """
        Each byte encodes the display status of a digit using, 
        where bit 0 encodes segment `A`, bit 1 encodes segments `B`, ..., bit 6 encodes segments `G`, and bit 7 encodes the decimal point (if present).
        If incoming ``digits`` data is smaller than `digit_count`, the remaining digits will be cleared.
        Thus, sending an empty ``digits`` payload clears the screen.
        
        ```text
         - A -
         G   B
         |   |
         - F -
         |   |   -
         E   C  |DP|
         - D -   -
        ```
        """
        reg = self.register(JD_SEVEN_SEGMENT_DISPLAY_REG_DIGITS)
        return reg.value(0)

    @digits.setter
    def digits(self, value: bytes) -> None:
        reg = self.register(JD_SEVEN_SEGMENT_DISPLAY_REG_DIGITS)
        reg.set_value(0, value)


    @property
    def brightness(self) -> Union[float, None]:
        """
        Controls the brightness of the LEDs. ``0`` means off., /
        """
        reg = self.register(JD_SEVEN_SEGMENT_DISPLAY_REG_BRIGHTNESS)
        return reg.value(0)

    @brightness.setter
    def brightness(self, value: float) -> None:
        reg = self.register(JD_SEVEN_SEGMENT_DISPLAY_REG_BRIGHTNESS)
        reg.set_value(0, value)


    @property
    def double_dots(self) -> Union[bool, None]:
        """
        (Optional) Turn on or off the column LEDs (separating minutes from hours, etc.) in of the segment.
        If the column LEDs is not supported, the value remains false.
        """
        reg = self.register(JD_SEVEN_SEGMENT_DISPLAY_REG_DOUBLE_DOTS)
        return reg.value(0)

    @double_dots.setter
    def double_dots(self, value: bool) -> None:
        reg = self.register(JD_SEVEN_SEGMENT_DISPLAY_REG_DOUBLE_DOTS)
        reg.set_value(0, value)


    @property
    def digit_count(self) -> Union[int, None]:
        """
        The number of digits available on the display.
        """
        reg = self.register(JD_SEVEN_SEGMENT_DISPLAY_REG_DIGIT_COUNT)
        return reg.value(0)

    @property
    def decimal_point(self) -> Union[bool, None]:
        """
        True if decimal points are available (on all digits).
        """
        reg = self.register(JD_SEVEN_SEGMENT_DISPLAY_REG_DECIMAL_POINT)
        return reg.value(0)


    def set_number(self, value: float) -> None:
        """
        Shows the number on the screen using the decimal dot if available.
        """
        # TODO: implement client command
        raise RuntimeError("client command not implemented")

    def set_text(self, text: str) -> None:
        """
        Shows the text on the screen. The client may decide to scroll the text if too long.
        """
        # TODO: implement client command
        raise RuntimeError("client command not implemented")
    
