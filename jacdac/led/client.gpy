from jacdac.bus import Bus, Client
from .constants import *
from typing import Union, cast


class LedClient(Client):
    """
    A controller for 1 or more monochrome or RGB LEDs connected in parallel.
    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_LED, JD_LED_PACK_FORMATS, role)
    

    @property
    def color_Red(self) -> Union[int, None]:
        """
        The current color of the LED.
        """
        reg = self.register(JD_LED_REG_COLOR)
        value = reg.value(0)
        return cast(Union[int, None], value)

    @property
    def color_Green(self) -> Union[int, None]:
        """
        The current color of the LED.
        """
        reg = self.register(JD_LED_REG_COLOR)
        value = reg.value(1)
        return cast(Union[int, None], value)

    @property
    def color_Blue(self) -> Union[int, None]:
        """
        The current color of the LED.
        """
        reg = self.register(JD_LED_REG_COLOR)
        value = reg.value(2)
        return cast(Union[int, None], value)

    @property
    def max_power(self) -> Union[int, None]:
        """
        (Optional) Limit the power drawn by the light-strip (and controller)., mA
        """
        reg = self.register(JD_LED_REG_MAX_POWER)
        value = reg.value(0)
        return cast(Union[int, None], value)

    @max_power.setter
    def max_power(self, value: int) -> None:
        reg = self.register(JD_LED_REG_MAX_POWER)
        reg.set_value(0, value)


    @property
    def led_count(self) -> Union[int, None]:
        """
        (Optional) If known, specifies the number of LEDs in parallel on this device.
        """
        reg = self.register(JD_LED_REG_LED_COUNT)
        value = reg.value(0)
        return cast(Union[int, None], value)

    @property
    def wave_length(self) -> Union[int, None]:
        """
        (Optional) If monochrome LED, specifies the wave length of the LED., nm
        """
        reg = self.register(JD_LED_REG_WAVE_LENGTH)
        value = reg.value(0)
        return cast(Union[int, None], value)

    @property
    def luminous_intensity(self) -> Union[int, None]:
        """
        (Optional) The luminous intensity of the LED, at full value, in micro candella., mcd
        """
        reg = self.register(JD_LED_REG_LUMINOUS_INTENSITY)
        value = reg.value(0)
        return cast(Union[int, None], value)

    @property
    def variant(self) -> Union[LedVariant, None]:
        """
        (Optional) The physical type of LED.
        """
        reg = self.register(JD_LED_REG_VARIANT)
        value = reg.value(0)
        return cast(Union[LedVariant, None], value)


    def animate(self, to_red: int, to_green: int, to_blue: int, speed: int) -> None:
        """
        This has the same semantics as `set_status_light` in the control service.
        """
        self.send_cmd_packed(JD_LED_CMD_ANIMATE, to_red, to_green, to_blue, speed)
    
