from jacdac.bus import Bus, Client
from .constants import *
from typing import Union, cast
from jacdac.events import EventHandlerFn, UnsubscribeFn

class SwitchClient(Client):
    """
    A switch, which keeps its position.
    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_SWITCH, JD_SWITCH_PACK_FORMATS, role)
    

    @property
    def active(self) -> Union[bool, None]:
        """
        Indicates whether the switch is currently active (on).
        """
        reg = self.register(JD_SWITCH_REG_ACTIVE)
        value = reg.value(0)
        return cast(Union[bool, None], value)

    @property
    def variant(self) -> Union[SwitchVariant, None]:
        """
        (Optional) Describes the type of switch used.
        """
        reg = self.register(JD_SWITCH_REG_VARIANT)
        value = reg.value(0)
        return cast(Union[SwitchVariant, None], value)

    @property
    def auto_off_delay(self) -> Union[float, None]:
        """
        (Optional) Specifies the delay without activity to automatically turn off after turning on.
        For example, some light switches in staircases have such a capability., s
        """
        reg = self.register(JD_SWITCH_REG_AUTO_OFF_DELAY)
        value = reg.value(0)
        return cast(Union[float, None], value)

    def on_on(self, handler: EventHandlerFn) -> UnsubscribeFn:
        """
        Emitted when switch goes from ``off`` to ``on``.
        """
        return self.on_event(JD_SWITCH_EV_ON, handler)

    def on_off(self, handler: EventHandlerFn) -> UnsubscribeFn:
        """
        Emitted when switch goes from ``on`` to ``off``.
        """
        return self.on_event(JD_SWITCH_EV_OFF, handler)

    
