# Autogenerated file. Do not edit.
from jacdac.bus import Bus, Client
from .constants import *
from typing import Optional, cast


class SensorAggregatorClient(Client):
    """
    Aggregate data from multiple sensors into a single stream
     * (often used as input to machine learning models on the same device, see model runner service).
    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_SENSOR_AGGREGATOR, JD_SENSOR_AGGREGATOR_PACK_FORMATS, role)
    

    @property
    def num_samples(self) -> Optional[int]:
        """
        Number of input samples collected so far.
        """
        reg = self.register(JD_SENSOR_AGGREGATOR_REG_NUM_SAMPLES)
        value = reg.value(0)
        return cast(Optional[int], value)

    @property
    def sample_size(self) -> Optional[int]:
        """
        Size of a single sample., B
        """
        reg = self.register(JD_SENSOR_AGGREGATOR_REG_SAMPLE_SIZE)
        value = reg.value(0)
        return cast(Optional[int], value)

    @property
    def streaming_samples(self) -> Optional[int]:
        """
        When set to `N`, will stream `N` samples as `current_sample` reading., #
        """
        reg = self.register(JD_SENSOR_AGGREGATOR_REG_STREAMING_SAMPLES)
        value = reg.value(0)
        return cast(Optional[int], value)

    @streaming_samples.setter
    def streaming_samples(self, value: int) -> None:
        reg = self.register(JD_SENSOR_AGGREGATOR_REG_STREAMING_SAMPLES)
        reg.set_value(0, value)


    @property
    def current_sample(self) -> Optional[bytes]:
        """
        Last collected sample.
        """
        reg = self.register(JD_SENSOR_AGGREGATOR_REG_CURRENT_SAMPLE)
        value = reg.value(0)
        return cast(Optional[bytes], value)

    
