# Autogenerated file. Do not edit.
from jacdac.bus import Bus, Client
from .constants import *
from typing import Optional, cast


class ThermocoupleClient(Client):
    """
    A thermocouple using a heat probe to gather temperatures.
    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_THERMOCOUPLE, JD_THERMOCOUPLE_PACK_FORMATS, role)
    

    @property
    def temperature(self) -> Optional[float]:
        """
        The temperature., _: 째C
        """
        reg = self.register(JD_THERMOCOUPLE_REG_TEMPERATURE)
        values = reg.values()
        return cast(Optional[float], values[0] if values else None)

    @property
    def min_temperature(self) -> Optional[float]:
        """
        Lowest temperature that can be reported., _: 째C
        """
        reg = self.register(JD_THERMOCOUPLE_REG_MIN_TEMPERATURE)
        values = reg.values()
        return cast(Optional[float], values[0] if values else None)

    @property
    def max_temperature(self) -> Optional[float]:
        """
        Highest temperature that can be reported., _: 째C
        """
        reg = self.register(JD_THERMOCOUPLE_REG_MAX_TEMPERATURE)
        values = reg.values()
        return cast(Optional[float], values[0] if values else None)

    @property
    def temperature_error(self) -> Optional[float]:
        """
        The real temperature is between `temperature - temperature_error` and `temperature + temperature_error`., _: 째C
        """
        reg = self.register(JD_THERMOCOUPLE_REG_TEMPERATURE_ERROR)
        values = reg.values()
        return cast(Optional[float], values[0] if values else None)

    @property
    def variant(self) -> Optional[ThermocoupleVariant]:
        """
        (Optional) Specifies the type of thermometer., 
        """
        reg = self.register(JD_THERMOCOUPLE_REG_VARIANT)
        values = reg.values()
        return cast(Optional[ThermocoupleVariant], values[0] if values else None)

    
