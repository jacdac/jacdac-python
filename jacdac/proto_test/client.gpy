from jacdac.bus import Bus, Client
from .constants import *
from typing import Union
from jacdac.events import EventHandlerFn, UnsubscribeFn

class ProtoTestClient(Client):
    """
    This is test service to validate the protocol packet transmissions between the browser and a MCU.
     * Use this page if you are porting Jacdac to a new platform.
    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_PROTO_TEST, JD_PROTO_TEST_PACK_FORMATS, role)
    

    @property
    def rw_bool(self) -> Union[bool, None]:
        """
        A read write bool register.
        """
        reg = self.register(JD_PROTO_TEST_REG_RW_BOOL)
        return reg.value(0)

    @rw_bool.setter
    def rw_bool(self, value: bool) -> None:
        reg = self.register(JD_PROTO_TEST_REG_RW_BOOL)
        reg.set_value(0, value)


    @property
    def ro_bool(self) -> Union[bool, None]:
        """
        A read only bool register. Mirrors rw_bool.
        """
        reg = self.register(JD_PROTO_TEST_REG_RO_BOOL)
        return reg.value(0)

    @property
    def rw_u32(self) -> Union[int, None]:
        """
        A read write u32 register.
        """
        reg = self.register(JD_PROTO_TEST_REG_RW_U32)
        return reg.value(0)

    @rw_u32.setter
    def rw_u32(self, value: int) -> None:
        reg = self.register(JD_PROTO_TEST_REG_RW_U32)
        reg.set_value(0, value)


    @property
    def ro_u32(self) -> Union[int, None]:
        """
        A read only u32 register.. Mirrors rw_u32.
        """
        reg = self.register(JD_PROTO_TEST_REG_RO_U32)
        return reg.value(0)

    @property
    def rw_i32(self) -> Union[int, None]:
        """
        A read write i32 register.
        """
        reg = self.register(JD_PROTO_TEST_REG_RW_I32)
        return reg.value(0)

    @rw_i32.setter
    def rw_i32(self, value: int) -> None:
        reg = self.register(JD_PROTO_TEST_REG_RW_I32)
        reg.set_value(0, value)


    @property
    def ro_i32(self) -> Union[int, None]:
        """
        A read only i32 register.. Mirrors rw_i32.
        """
        reg = self.register(JD_PROTO_TEST_REG_RO_I32)
        return reg.value(0)

    @property
    def rw_string(self) -> Union[str, None]:
        """
        A read write string register.
        """
        reg = self.register(JD_PROTO_TEST_REG_RW_STRING)
        return reg.value(0)

    @rw_string.setter
    def rw_string(self, value: str) -> None:
        reg = self.register(JD_PROTO_TEST_REG_RW_STRING)
        reg.set_value(0, value)


    @property
    def ro_string(self) -> Union[str, None]:
        """
        A read only string register. Mirrors rw_string.
        """
        reg = self.register(JD_PROTO_TEST_REG_RO_STRING)
        return reg.value(0)

    @property
    def rw_bytes(self) -> Union[bytes, None]:
        """
        A read write string register.
        """
        reg = self.register(JD_PROTO_TEST_REG_RW_BYTES)
        return reg.value(0)

    @rw_bytes.setter
    def rw_bytes(self, value: bytes) -> None:
        reg = self.register(JD_PROTO_TEST_REG_RW_BYTES)
        reg.set_value(0, value)


    @property
    def ro_bytes(self) -> Union[bytes, None]:
        """
        A read only string register. Mirrors ro_bytes.
        """
        reg = self.register(JD_PROTO_TEST_REG_RO_BYTES)
        return reg.value(0)

    @property
    def rw_i8_u8_u16_i32I8(self) -> Union[int, None]:
        """
        A read write i8, u8, u16, i32 register.
        """
        reg = self.register(JD_PROTO_TEST_REG_RW_I8_U8_U16_I32)
        return reg.value(0)

    @rw_i8_u8_u16_i32I8.setter
    def rw_i8_u8_u16_i32I8(self, value: int) -> None:
        reg = self.register(JD_PROTO_TEST_REG_RW_I8_U8_U16_I32)
        reg.set_value(0, value)


    @property
    def rw_i8_u8_u16_i32U8(self) -> Union[int, None]:
        """
        A read write i8, u8, u16, i32 register.
        """
        reg = self.register(JD_PROTO_TEST_REG_RW_I8_U8_U16_I32)
        return reg.value(1)

    @rw_i8_u8_u16_i32U8.setter
    def rw_i8_u8_u16_i32U8(self, value: int) -> None:
        reg = self.register(JD_PROTO_TEST_REG_RW_I8_U8_U16_I32)
        reg.set_value(1, value)


    @property
    def rw_i8_u8_u16_i32U16(self) -> Union[int, None]:
        """
        A read write i8, u8, u16, i32 register.
        """
        reg = self.register(JD_PROTO_TEST_REG_RW_I8_U8_U16_I32)
        return reg.value(2)

    @rw_i8_u8_u16_i32U16.setter
    def rw_i8_u8_u16_i32U16(self, value: int) -> None:
        reg = self.register(JD_PROTO_TEST_REG_RW_I8_U8_U16_I32)
        reg.set_value(2, value)


    @property
    def rw_i8_u8_u16_i32I32(self) -> Union[int, None]:
        """
        A read write i8, u8, u16, i32 register.
        """
        reg = self.register(JD_PROTO_TEST_REG_RW_I8_U8_U16_I32)
        return reg.value(3)

    @rw_i8_u8_u16_i32I32.setter
    def rw_i8_u8_u16_i32I32(self, value: int) -> None:
        reg = self.register(JD_PROTO_TEST_REG_RW_I8_U8_U16_I32)
        reg.set_value(3, value)


    @property
    def ro_i8_u8_u16_i32I8(self) -> Union[int, None]:
        """
        A read only i8, u8, u16, i32 register.. Mirrors rw_i8_u8_u16_i32.
        """
        reg = self.register(JD_PROTO_TEST_REG_RO_I8_U8_U16_I32)
        return reg.value(0)

    @property
    def ro_i8_u8_u16_i32U8(self) -> Union[int, None]:
        """
        A read only i8, u8, u16, i32 register.. Mirrors rw_i8_u8_u16_i32.
        """
        reg = self.register(JD_PROTO_TEST_REG_RO_I8_U8_U16_I32)
        return reg.value(1)

    @property
    def ro_i8_u8_u16_i32U16(self) -> Union[int, None]:
        """
        A read only i8, u8, u16, i32 register.. Mirrors rw_i8_u8_u16_i32.
        """
        reg = self.register(JD_PROTO_TEST_REG_RO_I8_U8_U16_I32)
        return reg.value(2)

    @property
    def ro_i8_u8_u16_i32I32(self) -> Union[int, None]:
        """
        A read only i8, u8, u16, i32 register.. Mirrors rw_i8_u8_u16_i32.
        """
        reg = self.register(JD_PROTO_TEST_REG_RO_I8_U8_U16_I32)
        return reg.value(3)

    @property
    def rw_u8_string_U8(self) -> Union[int, None]:
        """
        A read write u8, string register.
        """
        reg = self.register(JD_PROTO_TEST_REG_RW_U8_STRING)
        return reg.value(0)

    @rw_u8_string_U8.setter
    def rw_u8_string_U8(self, value: int) -> None:
        reg = self.register(JD_PROTO_TEST_REG_RW_U8_STRING)
        reg.set_value(0, value)


    @property
    def rw_u8_string_String(self) -> Union[str, None]:
        """
        A read write u8, string register.
        """
        reg = self.register(JD_PROTO_TEST_REG_RW_U8_STRING)
        return reg.value(1)

    @rw_u8_string_String.setter
    def rw_u8_string_String(self, value: str) -> None:
        reg = self.register(JD_PROTO_TEST_REG_RW_U8_STRING)
        reg.set_value(1, value)


    @property
    def ro_u8_string_U8(self) -> Union[int, None]:
        """
        A read only u8, string register.. Mirrors rw_u8_string.
        """
        reg = self.register(JD_PROTO_TEST_REG_RO_U8_STRING)
        return reg.value(0)

    @property
    def ro_u8_string_String(self) -> Union[str, None]:
        """
        A read only u8, string register.. Mirrors rw_u8_string.
        """
        reg = self.register(JD_PROTO_TEST_REG_RO_U8_STRING)
        return reg.value(1)

    def on_e_bool(self, handler: EventHandlerFn) -> UnsubscribeFn:
        """
        An event raised when rw_bool is modified
        """
        return self.on_event(JD_PROTO_TEST_EV_E_BOOL, handler)

    def on_e_u32(self, handler: EventHandlerFn) -> UnsubscribeFn:
        """
        An event raised when rw_u32 is modified
        """
        return self.on_event(JD_PROTO_TEST_EV_E_U32, handler)

    def on_e_i32(self, handler: EventHandlerFn) -> UnsubscribeFn:
        """
        An event raised when rw_i32 is modified
        """
        return self.on_event(JD_PROTO_TEST_EV_E_I32, handler)

    def on_e_string(self, handler: EventHandlerFn) -> UnsubscribeFn:
        """
        An event raised when rw_string is modified
        """
        return self.on_event(JD_PROTO_TEST_EV_E_STRING, handler)

    def on_e_bytes(self, handler: EventHandlerFn) -> UnsubscribeFn:
        """
        An event raised when rw_bytes is modified
        """
        return self.on_event(JD_PROTO_TEST_EV_E_BYTES, handler)

    def on_e_i8_u8_u16_i32(self, handler: EventHandlerFn) -> UnsubscribeFn:
        """
        An event raised when rw_i8_u8_u16_i32 is modified
        """
        return self.on_event(JD_PROTO_TEST_EV_E_I8_U8_U16_I32, handler)

    def on_e_u8_string(self, handler: EventHandlerFn) -> UnsubscribeFn:
        """
        An event raised when rw_u8_string is modified
        """
        return self.on_event(JD_PROTO_TEST_EV_E_U8_STRING, handler)


    def c_bool(self, bool: bool) -> None:
        """
        A command to set rw_bool.
        """
        self.send_cmd_packed(JD_PROTO_TEST_CMD_C_BOOL, [bool])

    def c_u32(self, u32: int) -> None:
        """
        A command to set rw_u32.
        """
        self.send_cmd_packed(JD_PROTO_TEST_CMD_C_U32, [u32])

    def c_i32(self, i32: int) -> None:
        """
        A command to set rw_i32.
        """
        self.send_cmd_packed(JD_PROTO_TEST_CMD_C_I32, [i32])

    def c_string(self, string: str) -> None:
        """
        A command to set rw_string.
        """
        self.send_cmd_packed(JD_PROTO_TEST_CMD_C_STRING, [string])

    def c_bytes(self, bytes: bytes) -> None:
        """
        A command to set rw_string.
        """
        self.send_cmd_packed(JD_PROTO_TEST_CMD_C_BYTES, [bytes])

    def c_i8_u8_u16_i32(self, i8: int, u8: int, u16: int, i32: int) -> None:
        """
        A command to set rw_bytes.
        """
        self.send_cmd_packed(JD_PROTO_TEST_CMD_C_I8_U8_U16_I32, [i8, u8, u16, i32])

    def c_u8_string(self, u8: int, string: str) -> None:
        """
        A command to set rw_u8_string.
        """
        self.send_cmd_packed(JD_PROTO_TEST_CMD_C_U8_STRING, [u8, string])
    
