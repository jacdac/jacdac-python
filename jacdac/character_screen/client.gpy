from jacdac.bus import Bus, Client
from .constants import *
from typing import Union


class CharacterScreenClient(Client):
    """
    A screen that displays characters.
    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_CHARACTER_SCREEN, JD_CHARACTER_SCREEN_PACK_FORMATS, role)
    

    @property
    def message(self) -> Union[str, None]:
        """
        Text to show. Use `\n` to break lines.
        """
        reg = self.register(JD_CHARACTER_SCREEN_REG_MESSAGE)
        return reg.value(0)

    @message.setter
    def message(self, value: str) -> None:
        reg = self.register(JD_CHARACTER_SCREEN_REG_MESSAGE)
        reg.set_value(0, value)


    @property
    def brightness(self) -> Union[float, None]:
        """
        (Optional) Brightness of the screen. `0` means off., /
        """
        reg = self.register(JD_CHARACTER_SCREEN_REG_BRIGHTNESS)
        return reg.value(0)

    @brightness.setter
    def brightness(self, value: float) -> None:
        reg = self.register(JD_CHARACTER_SCREEN_REG_BRIGHTNESS)
        reg.set_value(0, value)


    @property
    def variant(self) -> Union[CharacterScreenVariant, None]:
        """
        (Optional) Describes the type of character LED screen.
        """
        reg = self.register(JD_CHARACTER_SCREEN_REG_VARIANT)
        return reg.value(0)

    @property
    def text_direction(self) -> Union[CharacterScreenTextDirection, None]:
        """
        (Optional) Specifies the RTL or LTR direction of the text.
        """
        reg = self.register(JD_CHARACTER_SCREEN_REG_TEXT_DIRECTION)
        return reg.value(0)

    @text_direction.setter
    def text_direction(self, value: CharacterScreenTextDirection) -> None:
        reg = self.register(JD_CHARACTER_SCREEN_REG_TEXT_DIRECTION)
        reg.set_value(0, value)


    @property
    def rows(self) -> Union[float, None]:
        """
        Gets the number of rows., #
        """
        reg = self.register(JD_CHARACTER_SCREEN_REG_ROWS)
        return reg.value(0)

    @property
    def columns(self) -> Union[float, None]:
        """
        Gets the number of columns., #
        """
        reg = self.register(JD_CHARACTER_SCREEN_REG_COLUMNS)
        return reg.value(0)


    def set_line(self, index: float, message: str) -> None:
        """
        Overrides the content of a single line at a 0-based index.
        """
        # TODO: self.sendCommand(jacdac.JDPacket.jdpacked(JD_character_Screen_CMD_set_line, "u16 s", [index, message]))

    def clear(self, ) -> None:
        """
        Clears all text from the display.
        """
        # TODO: self.sendCommand(jacdac.JDPacket.onlyHeader(JD_character_Screen_CMD_clear))
    
