# Autogenerated file. Do not edit.
from jacdac.bus import Bus, Client
from .constants import *
from typing import Optional, cast


class CharacterScreenClient(Client):
    """
    A screen that displays characters.
    Implements a client for the `Character Screen <https://microsoft.github.io/jacdac-docs/services/characterscreen>`_ service.
    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_CHARACTER_SCREEN, JD_CHARACTER_SCREEN_PACK_FORMATS, role)
    

    @property
    def message(self) -> Optional[str]:
        """
        Text to show. Use `\n` to break lines., 
        """
        reg = self.register(JD_CHARACTER_SCREEN_REG_MESSAGE)
        values = reg.values()
        return cast(Optional[str], values[0] if values else None)

    @message.setter
    def message(self, value: str) -> None:
        reg = self.register(JD_CHARACTER_SCREEN_REG_MESSAGE)
        reg.set_values(value)


    @property
    def brightness(self) -> Optional[float]:
        """
        (Optional) Brightness of the screen. `0` means off., _: /
        """
        reg = self.register(JD_CHARACTER_SCREEN_REG_BRIGHTNESS)
        values = reg.values()
        return cast(Optional[float], values[0] if values else None)

    @brightness.setter
    def brightness(self, value: float) -> None:
        reg = self.register(JD_CHARACTER_SCREEN_REG_BRIGHTNESS)
        reg.set_values(value)


    @property
    def variant(self) -> Optional[CharacterScreenVariant]:
        """
        (Optional) Describes the type of character LED screen., 
        """
        reg = self.register(JD_CHARACTER_SCREEN_REG_VARIANT)
        values = reg.values()
        return cast(Optional[CharacterScreenVariant], values[0] if values else None)

    @property
    def text_direction(self) -> Optional[CharacterScreenTextDirection]:
        """
        (Optional) Specifies the RTL or LTR direction of the text., 
        """
        reg = self.register(JD_CHARACTER_SCREEN_REG_TEXT_DIRECTION)
        values = reg.values()
        return cast(Optional[CharacterScreenTextDirection], values[0] if values else None)

    @text_direction.setter
    def text_direction(self, value: CharacterScreenTextDirection) -> None:
        reg = self.register(JD_CHARACTER_SCREEN_REG_TEXT_DIRECTION)
        reg.set_values(value)


    @property
    def rows(self) -> Optional[int]:
        """
        Gets the number of rows., _: #
        """
        reg = self.register(JD_CHARACTER_SCREEN_REG_ROWS)
        values = reg.values()
        return cast(Optional[int], values[0] if values else None)

    @property
    def columns(self) -> Optional[int]:
        """
        Gets the number of columns., _: #
        """
        reg = self.register(JD_CHARACTER_SCREEN_REG_COLUMNS)
        values = reg.values()
        return cast(Optional[int], values[0] if values else None)


    def set_line(self, index: int, message: str) -> None:
        """
        Overrides the content of a single line at a 0-based index.
        """
        self.send_cmd_packed(JD_CHARACTER_SCREEN_CMD_SET_LINE, index, message)

    def clear(self, ) -> None:
        """
        Clears all text from the display.
        """
        self.send_cmd_packed(JD_CHARACTER_SCREEN_CMD_CLEAR, )
    
