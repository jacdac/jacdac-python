from jacdac.bus import Bus, Client
from .constants import *
from typing import Union


class SoundSpectrumClient(Client):
    """
    A microphone that analyzes the sound specturm
    """

    def __init__(self, bus: Bus, role: str) -> None:
        super().__init__(bus, JD_SERVICE_CLASS_SOUND_SPECTRUM, JD_SOUND_SPECTRUM_PACK_FORMATS, role)
    

    @property
    def frequency_bins(self) -> Union[bytes, None]:
        """
        The computed frequency data.
        """
        reg = self.register(JD_SOUND_SPECTRUM_REG_FREQUENCY_BINS)
        return reg.value(0)

    @property
    def enabled(self) -> Union[bool, None]:
        """
        Turns on/off the micropohone.
        """
        reg = self.register(JD_SOUND_SPECTRUM_REG_ENABLED)
        return reg.value(0)

    @enabled.setter
    def enabled(self, value: bool) -> None:
        reg = self.register(JD_SOUND_SPECTRUM_REG_ENABLED)
        reg.set_value(0, value)


    @property
    def fft_pow2_size(self) -> Union[int, None]:
        """
        The power of 2 used as the size of the FFT to be used to determine the frequency domain.
        """
        reg = self.register(JD_SOUND_SPECTRUM_REG_FFT_POW2_SIZE)
        return reg.value(0)

    @fft_pow2_size.setter
    def fft_pow2_size(self, value: int) -> None:
        reg = self.register(JD_SOUND_SPECTRUM_REG_FFT_POW2_SIZE)
        reg.set_value(0, value)


    @property
    def min_decibels(self) -> Union[int, None]:
        """
        The minimum power value in the scaling range for the FFT analysis data, dB
        """
        reg = self.register(JD_SOUND_SPECTRUM_REG_MIN_DECIBELS)
        return reg.value(0)

    @min_decibels.setter
    def min_decibels(self, value: int) -> None:
        reg = self.register(JD_SOUND_SPECTRUM_REG_MIN_DECIBELS)
        reg.set_value(0, value)


    @property
    def max_decibels(self) -> Union[int, None]:
        """
        The maximum power value in the scaling range for the FFT analysis data, dB
        """
        reg = self.register(JD_SOUND_SPECTRUM_REG_MAX_DECIBELS)
        return reg.value(0)

    @max_decibels.setter
    def max_decibels(self, value: int) -> None:
        reg = self.register(JD_SOUND_SPECTRUM_REG_MAX_DECIBELS)
        reg.set_value(0, value)


    @property
    def smoothing_time_constant(self) -> Union[float, None]:
        """
        The averaging constant with the last analysis frame. 
        If ``0`` is set, there is no averaging done, whereas a value of ``1`` means "overlap the previous and current buffer quite a lot while computing the value"., /
        """
        reg = self.register(JD_SOUND_SPECTRUM_REG_SMOOTHING_TIME_CONSTANT)
        return reg.value(0)

    @smoothing_time_constant.setter
    def smoothing_time_constant(self, value: float) -> None:
        reg = self.register(JD_SOUND_SPECTRUM_REG_SMOOTHING_TIME_CONSTANT)
        reg.set_value(0, value)


    
